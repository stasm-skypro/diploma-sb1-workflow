# ci.yaml
name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Run linter
        run: flake8 .

  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: |
          python manage.py migrate
          python manage.py test
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: localhost
          DB_PORT: ${{ secrets.DB_PORT }}
          EMAIL_HOST: ${EMAIL_HOST}
          EMAIL_PORT: ${EMAIL_PORT}
          EMAIL_USE_TLS: ${EMAIL_USE_TLS}
          EMAIL_USE_SSL: ${EMAIL_USE_SSL}
          EMAIL_HOST_USER: ${EMAIL_HOST_USER}
          EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
          CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
          CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}

  build:
    name: Build and compose up
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and start containers
        run: |
          docker compose -f compose.yaml build
          docker compose -f compose.yaml up -d
          docker ps -a
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          EMAIL_HOST: ${EMAIL_HOST}
          EMAIL_PORT: ${EMAIL_PORT}
          EMAIL_USE_TLS: ${EMAIL_USE_TLS}
          EMAIL_USE_SSL: ${EMAIL_USE_SSL}
          EMAIL_HOST_USER: ${EMAIL_HOST_USER}
          EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
          CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
          CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}

  deploy:
    name: Deploy to YC server
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Create .env file localy
        run: |
          cat <<EOT > .env
          DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}"
          DJANGO_ALLOWED_HOSTS="${{ secrets.DJANGO_ALLOWED_HOSTS }}"
          DB_NAME="${{ secrets.DB_NAME }}"
          DB_USER="${{ secrets.DB_USER }}"
          DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          DB_HOST="${{ secrets.DB_HOST }}"
          DB_PORT="${{ secrets.DB_PORT }}"
          EMAIL_HOST="${{ secrets.EMAIL_HOST }}"
          EMAIL_PORT="${{ secrets.EMAIL_PORT }}"
          EMAIL_USE_TLS="${{ secrets.EMAIL_USE_TLS }}"
          EMAIL_USE_SSL="${{ secrets.EMAIL_USE_SSL }}"
          EMAIL_HOST_USER="${{ secrets.EMAIL_HOST_USER }}"
          EMAIL_HOST_PASSWORD="${{ secrets.EMAIL_HOST_PASSWORD }}"
          CELERY_BROKER_URL="${{ secrets.CELERY_BROKER_URL }}"
          CELERY_RESULT_BACKEND="${{ secrets.CELERY_RESULT_BACKEND }}"
          EOT
      - name: Copy files to server via rsync
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
            --exclude '.git' \
            ./ \
            ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SSH_USER }}/app/
      - name: Run Docker Compose on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} <<EOF
            cd /home/${{ secrets.SSH_USER }}/app
            docker compose --env-file .env down
            docker compose --env-file .env up --build -d
            docker ps -a
          EOF
