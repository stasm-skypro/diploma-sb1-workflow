# config/settings.py
"""
Django settings for config project.
Generated by 'django-admin startproject' using Django 5.2.1.
"""

import os
import sys
from datetime import timedelta
from pathlib import Path

from config.utils import get_env

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = get_env("DJANGO_SECRET_KEY", required=True)
DEBUG = get_env("DJANGO_DEBUG", default=False) == "True"
hosts = get_env("DJANGO_ALLOWED_HOSTS", default="localhost")
ALLOWED_HOSTS = [host.strip() for host in hosts.split(",")] if hosts else []

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]  # Встроенные приложения
INSTALLED_APPS += [
    "corsheaders",
    "drf_yasg",
    "rest_framework",
    "rest_framework_simplejwt",
    "crispy_forms",
]  # Сторонние приложения
INSTALLED_APPS += ["user", "bulletin"]  # Пользовательские приложения

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
MIDDLEWARE += ["corsheaders.middleware.CorsMiddleware"]  # Сторонние приложения

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
TEMPLATES[0]["DIRS"] = [BASE_DIR / "templates"]

WSGI_APPLICATION = "config.wsgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": get_env("DB_NAME", required=True),
        "USER": get_env("DB_USER", required=True),
        "PASSWORD": get_env("DB_PASSWORD", required=True),
        "HOST": get_env("DB_HOST", required=True),
        "PORT": get_env("DB_PORT", required=True),
    }
}

# Настройка лёгкой БД для тестов
if "pytest" in sys.argv[0]:
    DATABASES["default"] = {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

LANGUAGE_CODE = "en-us"
TIME_ZONE = "Asia/Almaty"
USE_I18N = True
USE_TZ = True

STATIC_URL = "static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "user.User"

# Настройка CORS - домены, которым разрешён доступ
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://5.35.108.203",
]
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://5.35.108.203",
]
CORS_ALLOW_ALL_ORIGINS = False

# Media files
MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "/media/"
FILE_UPLOAD_MAX_MEMORY_SIZE = 2 * 1024 * 1024  # max 2 MB

REST_FRAMEWORK = {
    "DEFAULT_FILTER_BACKENDS": [  # Настройка фильтрации данных
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    # Настройка прав доступа для всех контроллеров
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    # Настройка сериализаторов DRF Browsable API
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
}
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "AUTH_HEADER_TYPES": ("Bearer",),
}

FRONTEND_RESET_PASSWORD_URL = "http://localhost:3000/reset-password"  # фронт может обработать ссылку

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = get_env("EMAIL_HOST", default="smtp.gmail.com")
EMAIL_PORT = get_env("EMAIL_PORT", default=587)
EMAIL_USE_TLS = get_env("EMAIL_USE_TLS", default=True) == "True"
EMAIL_USE_SSL = get_env("EMAIL_USE_SSL", default=False) == "True"
EMAIL_HOST_USER = get_env("EMAIL_HOST_USER", required=True)  # отправитель
EMAIL_HOST_PASSWORD = get_env("EMAIL_HOST_PASSWORD", required=True)  # сгенерированный app password
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

CELERY_BROKER_URL = get_env("CELERY_BROKER_URL", required=True)
CELERY_RESULT_BACKEND = get_env("CELERY_RESULT_BACKEND", required=True)
CELERY_TIME_ZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60

# Усовершенствованное отображение форм Bootstrap
CRISPY_TEMPLATE_PACK = "bootstrap4"

# Убирает предупреждение в консоли - теперь (без точки): GET /swaggerjson
SWAGGER_USE_COMPAT_RENDERERS = False

# Настройка CORS - домены, которым разрешён доступ
CORS_ALLOWED_ORIGINS = ["http://localhost:3000", "http://127.0.0.1:3000", "http://5.35.108.203"]
CSRF_TRUSTED_ORIGINS = ["http://localhost:3000", "http://127.0.0.1:3000", "http://5.35.108.203"]
